Backtracking problem available on gfg

class Solution {
  public:
    void solve(int start, int n, int k, vector<int>& curr, vector<vector<int>>& ans) {
        if (n == 0 && k == 0) {
            ans.push_back(curr);
            return;
        }
        if (n < 0 || k < 0) return;

        for (int i = start; i <= 9; i++) {
            curr.push_back(i);
            solve(i + 1, n - i, k - 1, curr, ans);
            curr.pop_back(); // backtrack
        }
    }

    vector<vector<int>> combinationSum(int n, int k) {
        vector<vector<int>> ans;
        vector<int> curr;
        solve(1, n, k, curr, ans);
        return ans;
    }
};
